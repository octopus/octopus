# -*- coding: utf-8 mode: shell-script -*-

Test       : Time-dependent magnetic field
Program    : octopus
TestGroups : long-run, real_time
Enabled    : Yes

# This test demonstrates the possibility of using time-dependent
# magnetic fields (the test works on a 2D system; in principle one could
# use time-dependent magnetic fields both in 2D and in 3D).
#
# The calculation replicates the results given by Popsueva et al.
# [J. Phys.: Condens. Matter 19, 196204 (2007)]. The idea is to
# induce the transfer of one particle, initially localized in one 
# quantum dot, to a neighboring identical quantum dot, by fast
# switching of a time-dependent magnetic field.
#
# In order to prepare the initial state one should make a linear
# combination of the two approximately degenerate states (gerade 
# and ungerade) that lie lower in energy. However, since the states
# are complex this linear combination is just a sum, and one needs
# to multiply by a global phase that cannot be predicted -- one
# should look at the results of the gs and unocc calculation and
# apply it by hand. [See below for the exact way to do this.]
#
# Therefore we apply an approximate procedure: in the gs and unocc
# calculation, we have a small asymmetry between the two quantum
# dots, enough to localize the states in one or the other well.
# The time-propagation is then performed with the symmetric
# potential.

Input: 11-tdmagnetic.01-gs.inp
match ; Total energy ; GREPFIELD(static/info, 'Total       =', 3) ; 1.79226552

Input: 11-tdmagnetic.02-unocc.inp
Precision: 0.00013
match ; Unoccupied state 1; GREPFIELD(static/eigenvalues, '2   --', 3) ; 1.802442

Input: 11-tdmagnetic.03-td.inp
Precision: 0.0001
match ; <x>(t) ; LINEFIELD(td.general/multipoles, -1, 4) ; 1.448208882702e+00
match ; <y>(t) ; LINEFIELD(td.general/multipoles, -1, 5) ; -1.105531371295e-02


# In order to do the "exact" calculation with perfectly symmetric
# quantum dots, one should:
# (1) Do the gs and unocc calculations removing the small asymmetry.
# (2) Calculate the ratio of the imaginary to the real part, in the
# x-axis (which should be a constant) for both the ground (r1) and
# the first excited state (r2). Calculate theta1 = atan(r1) and
# theta2 = atan(r2).
# (3) Add the following lines to the time-dependent run input file:
#
#kappa = 1.0/sqrt(2.0)
#%TransformStates
#kappa*exp(-i*atan(theta1)) | kappa*exp(-i*atan(theta2))
#kappa*exp(-i*atan(theta1)) | -kappa*exp(-i*atan(theta2))
#%
#
# This transformation should create an initial state localized on one
# of the potential wells.
#

